{
  "IResolver": {
    "components": {
      "schemas": {
        "GetDIDComponentArgs": {
          "type": "object",
          "properties": {
            "didDocument": {
              "$ref": "#/components/schemas/DIDDocument",
              "description": "the DID document from which to extract the fragment. This MUST be the document resolved by  {@link  resolveDid  }"
            },
            "didUrl": {
              "type": "string",
              "description": "The DID URI that refers to the subsection by #fragment. Example: did:example:identifier#controller"
            },
            "section": {
              "$ref": "#/components/schemas/DIDDocumentSection",
              "description": "The section of the DID document where to search for the fragment. Example 'keyAgreement', or 'assertionMethod', or 'authentication', etc"
            }
          },
          "required": [
            "didDocument",
            "didUrl"
          ],
          "description": "Input arguments for  {@link  IResolver.getDIDComponentById | getDIDComponentById }"
        },
        "DIDDocument": {
          "type": "object",
          "properties": {
            "authentication": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/VerificationMethod"
                  }
                ]
              }
            },
            "assertionMethod": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/VerificationMethod"
                  }
                ]
              }
            },
            "keyAgreement": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/VerificationMethod"
                  }
                ]
              }
            },
            "capabilityInvocation": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/VerificationMethod"
                  }
                ]
              }
            },
            "capabilityDelegation": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/components/schemas/VerificationMethod"
                  }
                ]
              }
            },
            "@context": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "https://www.w3.org/ns/did/v1"
                },
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "id": {
              "type": "string"
            },
            "alsoKnownAs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "controller": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "verificationMethod": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerificationMethod"
              }
            },
            "service": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ServiceEndpoint"
              }
            },
            "publicKey": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerificationMethod"
              },
              "deprecated": true
            }
          },
          "required": [
            "id"
          ]
        },
        "VerificationMethod": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "controller": {
              "type": "string"
            },
            "publicKeyBase58": {
              "type": "string"
            },
            "publicKeyBase64": {
              "type": "string"
            },
            "publicKeyJwk": {
              "$ref": "#/components/schemas/JsonWebKey"
            },
            "publicKeyHex": {
              "type": "string"
            },
            "publicKeyMultibase": {
              "type": "string"
            },
            "blockchainAccountId": {
              "type": "string"
            },
            "ethereumAddress": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "type",
            "controller"
          ]
        },
        "JsonWebKey": {
          "type": "object",
          "properties": {
            "alg": {
              "type": "string"
            },
            "crv": {
              "type": "string"
            },
            "e": {
              "type": "string"
            },
            "ext": {
              "type": "boolean"
            },
            "key_ops": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "kid": {
              "type": "string"
            },
            "kty": {
              "type": "string"
            },
            "n": {
              "type": "string"
            },
            "use": {
              "type": "string"
            },
            "x": {
              "type": "string"
            },
            "y": {
              "type": "string"
            }
          },
          "required": [
            "kty"
          ],
          "description": "Encapsulates a JSON web key type that includes only the public properties that can be used in DID documents.\n\nThe private properties are intentionally omitted to discourage the use (and accidental disclosure) of private keys in DID documents."
        },
        "ServiceEndpoint": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "serviceEndpoint": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "type",
            "serviceEndpoint"
          ]
        },
        "DIDDocumentSection": {
          "type": "string",
          "enum": [
            "verificationMethod",
            "publicKey",
            "service",
            "authentication",
            "assertionMethod",
            "keyAgreement",
            "capabilityInvocation",
            "capabilityDelegation"
          ]
        },
        "DIDDocComponent": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/VerificationMethod"
            },
            {
              "$ref": "#/components/schemas/ServiceEndpoint"
            }
          ],
          "description": "Return type of  {@link  IResolver.getDIDComponentById | getDIDComponentById } \nrepresents a `VerificationMethod` or a `ServiceEndpoint` entry from a  {@link  did-resolver#DIDDocument | DIDDocument }"
        },
        "ResolveDidArgs": {
          "type": "object",
          "properties": {
            "didUrl": {
              "type": "string",
              "description": "DID URL"
            },
            "options": {
              "$ref": "#/components/schemas/DIDResolutionOptions",
              "description": "DID resolution options that will be passed to the method specific resolver. See: https://w3c.github.io/did-spec-registries/#did-resolution-input-metadata See: https://www.w3.org/TR/did-core/#did-resolution-options"
            }
          },
          "required": [
            "didUrl"
          ],
          "description": "Input arguments for  {@link  IResolver.resolveDid | resolveDid }"
        },
        "DIDResolutionOptions": {
          "type": "object",
          "properties": {
            "accept": {
              "type": "string"
            }
          }
        },
        "DIDResolutionResult": {
          "type": "object",
          "properties": {
            "@context": {
              "anyOf": [
                {
                  "type": "string",
                  "const": "https://w3id.org/did-resolution/v1"
                },
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "didResolutionMetadata": {
              "$ref": "#/components/schemas/DIDResolutionMetadata"
            },
            "didDocument": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DIDDocument"
                },
                {
                  "type": "null"
                }
              ]
            },
            "didDocumentMetadata": {
              "$ref": "#/components/schemas/DIDDocumentMetadata"
            }
          },
          "required": [
            "didResolutionMetadata",
            "didDocument",
            "didDocumentMetadata"
          ]
        },
        "DIDResolutionMetadata": {
          "type": "object",
          "properties": {
            "contentType": {
              "type": "string"
            },
            "error": {
              "type": "string"
            }
          }
        },
        "DIDDocumentMetadata": {
          "type": "object",
          "properties": {
            "created": {
              "type": "string"
            },
            "updated": {
              "type": "string"
            },
            "deactivated": {
              "type": "boolean"
            },
            "versionId": {
              "type": "string"
            },
            "nextUpdate": {
              "type": "string"
            },
            "nextVersionId": {
              "type": "string"
            },
            "equivalentId": {
              "type": "string"
            },
            "canonicalId": {
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "getDIDComponentById": {
          "description": "Dereferences a DID URL fragment and returns the corresponding DID document entry.",
          "arguments": {
            "$ref": "#/components/schemas/GetDIDComponentArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/DIDDocComponent"
          }
        },
        "resolveDid": {
          "description": "Resolves DID and returns DID Resolution Result",
          "arguments": {
            "$ref": "#/components/schemas/ResolveDidArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/DIDResolutionResult"
          }
        }
      }
    }
  },
  "IKeyManager": {
    "components": {
      "schemas": {
        "IKeyManagerCreateArgs": {
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/TKeyType",
              "description": "Key type"
            },
            "kms": {
              "type": "string",
              "description": "Key Management System"
            },
            "meta": {
              "$ref": "#/components/schemas/KeyMetadata",
              "description": "Optional. Key meta data"
            }
          },
          "required": [
            "type",
            "kms"
          ],
          "description": "Input arguments for  {@link  IKeyManager.keyManagerCreate | keyManagerCreate }"
        },
        "TKeyType": {
          "type": "string",
          "enum": [
            "Ed25519",
            "Secp256k1",
            "X25519",
            "Bls12381G1",
            "Bls12381G2"
          ],
          "description": "Cryptographic key type"
        },
        "KeyMetadata": {
          "type": "object",
          "properties": {
            "algorithms": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ManagedKeyInfo": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "kms": {
              "type": "string",
              "description": "Key Management System"
            },
            "type": {
              "$ref": "#/components/schemas/TKeyType",
              "description": "Key type"
            },
            "publicKeyHex": {
              "type": "string",
              "description": "Public key"
            },
            "meta": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/KeyMetadata"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Key metadata. This should be used to determine which algorithms are supported."
            }
          },
          "required": [
            "kid",
            "kms",
            "type",
            "publicKeyHex"
          ],
          "description": "Represents information about a managed key. Private or secret key material is not present."
        },
        "IKeyManagerDecryptJWEArgs": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "data": {
              "type": "string",
              "description": "Encrypted data"
            }
          },
          "required": [
            "kid",
            "data"
          ],
          "description": "Input arguments for  {@link  IKeyManager.keyManagerDecryptJWE | keyManagerDecryptJWE }"
        },
        "IKeyManagerDeleteArgs": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            }
          },
          "required": [
            "kid"
          ],
          "description": "Input arguments for  {@link  IKeyManager.keyManagerDelete | keyManagerDelete }"
        },
        "IKeyManagerEncryptJWEArgs": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID to use for encryption"
            },
            "to": {
              "type": "object",
              "properties": {
                "kid": {
                  "type": "string",
                  "description": "Key ID"
                },
                "type": {
                  "$ref": "#/components/schemas/TKeyType",
                  "description": "Key type"
                },
                "publicKeyHex": {
                  "type": "string",
                  "description": "Public key"
                },
                "privateKeyHex": {
                  "type": "string",
                  "description": "Optional. Private key"
                },
                "meta": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/KeyMetadata"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "Optional. Key metadata. This should be used to determine which algorithms are supported."
                }
              },
              "required": [
                "kid",
                "type",
                "publicKeyHex"
              ],
              "description": "Recipient key object"
            },
            "data": {
              "type": "string",
              "description": "Data to encrypt"
            }
          },
          "required": [
            "kid",
            "to",
            "data"
          ],
          "description": "Input arguments for  {@link  IKeyManager.keyManagerEncryptJWE | keyManagerEncryptJWE }"
        },
        "IKeyManagerGetArgs": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            }
          },
          "required": [
            "kid"
          ],
          "description": "Input arguments for  {@link  IKeyManager.keyManagerGet | keyManagerGet }"
        },
        "IKey": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "kms": {
              "type": "string",
              "description": "Key Management System"
            },
            "type": {
              "$ref": "#/components/schemas/TKeyType",
              "description": "Key type"
            },
            "publicKeyHex": {
              "type": "string",
              "description": "Public key"
            },
            "privateKeyHex": {
              "type": "string",
              "description": "Optional. Private key"
            },
            "meta": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/KeyMetadata"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Key metadata. This should be used to determine which algorithms are supported."
            }
          },
          "required": [
            "kid",
            "kms",
            "type",
            "publicKeyHex"
          ],
          "description": "Cryptographic key"
        },
        "MinimalImportableKey": {
          "$ref": "#/components/schemas/RequireOnly<IKey,(\"privateKeyHex\"|\"type\"|\"kms\")>",
          "description": "Represents the properties required to import a key."
        },
        "RequireOnly<IKey,(\"privateKeyHex\"|\"type\"|\"kms\")>": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "kms": {
              "type": "string",
              "description": "Key Management System"
            },
            "type": {
              "$ref": "#/components/schemas/TKeyType",
              "description": "Key type"
            },
            "publicKeyHex": {
              "type": "string",
              "description": "Public key"
            },
            "privateKeyHex": {
              "type": "string",
              "description": "Optional. Private key"
            },
            "meta": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/KeyMetadata"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Key metadata. This should be used to determine which algorithms are supported."
            }
          },
          "description": "Represents an object type where a subset of keys are required and everything else is optional."
        },
        "IKeyManagerSharedSecretArgs": {
          "type": "object",
          "properties": {
            "secretKeyRef": {
              "type": "string",
              "description": "The secret key handle (`kid`) as returned by  {@link  IKeyManager.keyManagerCreate | keyManagerCreate }"
            },
            "publicKey": {
              "type": "object",
              "properties": {
                "publicKeyHex": {
                  "type": "string",
                  "description": "Public key"
                },
                "type": {
                  "$ref": "#/components/schemas/TKeyType",
                  "description": "Key type"
                }
              },
              "required": [
                "publicKeyHex",
                "type"
              ],
              "description": "The public key of the other party. The `type` of key MUST be compatible with the type referenced by `secretKeyRef`"
            }
          },
          "required": [
            "secretKeyRef",
            "publicKey"
          ],
          "description": "Input arguments for  {@link  IKeyManager.keyManagerSharedSecret | keyManagerSharedSecret }"
        },
        "IKeyManagerSignArgs": {
          "type": "object",
          "properties": {
            "keyRef": {
              "type": "string",
              "description": "The key handle, as returned during `keyManagerCreateKey`"
            },
            "algorithm": {
              "type": "string",
              "description": "The algorithm to use for signing. This must be one of the algorithms supported by the KMS for this key type.\n\nThe algorithm used here should match one of the names listed in `IKey.meta.algorithms`"
            },
            "data": {
              "type": "string",
              "description": "Data to sign"
            },
            "encoding": {
              "type": "string",
              "enum": [
                "utf-8",
                "base16",
                "base64",
                "hex"
              ],
              "description": "If the data is a \"string\" then you can specify which encoding is used. Default is \"utf-8\""
            }
          },
          "required": [
            "keyRef",
            "data"
          ],
          "description": "Input arguments for  {@link  IKeyManager.keyManagerSign | keyManagerSign }"
        },
        "IKeyManagerSignEthTXArgs": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "transaction": {
              "type": "object",
              "description": "Ethereum transaction object"
            }
          },
          "required": [
            "kid",
            "transaction"
          ],
          "description": "Input arguments for  {@link  IKeyManager.keyManagerSignEthTX | keyManagerSignEthTX }"
        },
        "IKeyManagerSignJWTArgs": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "data": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "BYTES_PER_ELEMENT": {
                      "type": "number"
                    },
                    "buffer": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "byteLength": {
                              "type": "number"
                            }
                          },
                          "required": [
                            "byteLength"
                          ]
                        },
                        {}
                      ]
                    },
                    "byteLength": {
                      "type": "number"
                    },
                    "byteOffset": {
                      "type": "number"
                    },
                    "length": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "BYTES_PER_ELEMENT",
                    "buffer",
                    "byteLength",
                    "byteOffset",
                    "length"
                  ],
                  "additionalProperties": {
                    "type": "number"
                  }
                }
              ],
              "description": "Data to sign"
            }
          },
          "required": [
            "kid",
            "data"
          ],
          "description": "Input arguments for  {@link  IKeyManager.keyManagerSignJWT | keyManagerSignJWT }"
        }
      },
      "methods": {
        "keyManagerCreate": {
          "description": "Creates and returns a new key",
          "arguments": {
            "$ref": "#/components/schemas/IKeyManagerCreateArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/ManagedKeyInfo"
          }
        },
        "keyManagerDecryptJWE": {
          "description": "Decrypts data",
          "arguments": {
            "$ref": "#/components/schemas/IKeyManagerDecryptJWEArgs"
          },
          "returnType": {
            "type": "string"
          }
        },
        "keyManagerDelete": {
          "description": "Deletes a key",
          "arguments": {
            "$ref": "#/components/schemas/IKeyManagerDeleteArgs"
          },
          "returnType": {
            "type": "boolean"
          }
        },
        "keyManagerEncryptJWE": {
          "description": "Encrypts data",
          "arguments": {
            "$ref": "#/components/schemas/IKeyManagerEncryptJWEArgs"
          },
          "returnType": {
            "type": "string"
          }
        },
        "keyManagerGet": {
          "description": "Returns an existing key",
          "arguments": {
            "$ref": "#/components/schemas/IKeyManagerGetArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/IKey"
          }
        },
        "keyManagerGetKeyManagementSystems": {
          "description": "Lists available key management systems",
          "arguments": {
            "type": "object"
          },
          "returnType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "keyManagerImport": {
          "description": "Imports a created key",
          "arguments": {
            "$ref": "#/components/schemas/MinimalImportableKey"
          },
          "returnType": {
            "$ref": "#/components/schemas/ManagedKeyInfo"
          }
        },
        "keyManagerSharedSecret": {
          "description": "Compute a shared secret with the public key of another party.",
          "arguments": {
            "$ref": "#/components/schemas/IKeyManagerSharedSecretArgs"
          },
          "returnType": {
            "type": "string"
          }
        },
        "keyManagerSign": {
          "description": "Generates a signature according to the algorithm specified.",
          "arguments": {
            "$ref": "#/components/schemas/IKeyManagerSignArgs"
          },
          "returnType": {
            "type": "string"
          }
        },
        "keyManagerSignEthTX": {
          "description": "Signs Ethereum transaction",
          "arguments": {
            "$ref": "#/components/schemas/IKeyManagerSignEthTXArgs"
          },
          "returnType": {
            "type": "string"
          }
        },
        "keyManagerSignJWT": {
          "description": "Signs JWT",
          "arguments": {
            "$ref": "#/components/schemas/IKeyManagerSignJWTArgs"
          },
          "returnType": {
            "type": "string"
          }
        }
      }
    }
  },
  "IDIDManager": {
    "components": {
      "schemas": {
        "IDIDManagerAddKeyArgs": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "DID"
            },
            "key": {
              "$ref": "#/components/schemas/IKey",
              "description": "Key object"
            },
            "options": {
              "type": "object",
              "description": "Optional. Identifier provider specific options"
            }
          },
          "required": [
            "did",
            "key"
          ],
          "description": "Input arguments for  {@link  IDIDManager.didManagerAddKey | didManagerAddKey }"
        },
        "IKey": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "kms": {
              "type": "string",
              "description": "Key Management System"
            },
            "type": {
              "$ref": "#/components/schemas/TKeyType",
              "description": "Key type"
            },
            "publicKeyHex": {
              "type": "string",
              "description": "Public key"
            },
            "privateKeyHex": {
              "type": "string",
              "description": "Optional. Private key"
            },
            "meta": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/KeyMetadata"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Key metadata. This should be used to determine which algorithms are supported."
            }
          },
          "required": [
            "kid",
            "kms",
            "type",
            "publicKeyHex"
          ],
          "description": "Cryptographic key"
        },
        "TKeyType": {
          "type": "string",
          "enum": [
            "Ed25519",
            "Secp256k1",
            "X25519",
            "Bls12381G1",
            "Bls12381G2"
          ],
          "description": "Cryptographic key type"
        },
        "KeyMetadata": {
          "type": "object",
          "properties": {
            "algorithms": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "IDIDManagerAddServiceArgs": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "DID"
            },
            "service": {
              "$ref": "#/components/schemas/IService",
              "description": "Service object"
            },
            "options": {
              "type": "object",
              "description": "Optional. Identifier provider specific options"
            }
          },
          "required": [
            "did",
            "service"
          ],
          "description": "Input arguments for  {@link  IDIDManager.didManagerAddService | didManagerAddService }"
        },
        "IService": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "ID"
            },
            "type": {
              "type": "string",
              "description": "Service type"
            },
            "serviceEndpoint": {
              "type": "string",
              "description": "Endpoint URL"
            },
            "description": {
              "type": "string",
              "description": "Optional. Description"
            }
          },
          "required": [
            "id",
            "type",
            "serviceEndpoint"
          ],
          "description": "Identifier service"
        },
        "IDIDManagerCreateArgs": {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string",
              "description": "Optional. Identifier alias. Can be used to reference an object in an external system"
            },
            "provider": {
              "type": "string",
              "description": "Optional. Identifier provider"
            },
            "kms": {
              "type": "string",
              "description": "Optional. Key Management System"
            },
            "options": {
              "type": "object",
              "description": "Optional. Identifier provider specific options"
            }
          },
          "description": "Input arguments for  {@link  IDIDManager.didManagerCreate | didManagerCreate }"
        },
        "IIdentifier": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "Decentralized identifier"
            },
            "alias": {
              "type": "string",
              "description": "Optional. Identifier alias. Can be used to reference an object in an external system"
            },
            "provider": {
              "type": "string",
              "description": "Identifier provider name"
            },
            "controllerKeyId": {
              "type": "string",
              "description": "Controller key id"
            },
            "keys": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IKey"
              },
              "description": "Array of managed keys"
            },
            "services": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IService"
              },
              "description": "Array of services"
            }
          },
          "required": [
            "did",
            "provider",
            "keys",
            "services"
          ],
          "description": "Identifier interface"
        },
        "IDIDManagerDeleteArgs": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "DID"
            }
          },
          "required": [
            "did"
          ],
          "description": "Input arguments for  {@link  IDIDManager.didManagerDelete | didManagerDelete }"
        },
        "IDIDManagerFindArgs": {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string",
              "description": "Optional. Alias"
            },
            "provider": {
              "type": "string",
              "description": "Optional. Provider"
            }
          },
          "description": "Input arguments for  {@link  IDIDManager.didManagerFind | didManagerFind }"
        },
        "IDIDManagerGetArgs": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "DID"
            }
          },
          "required": [
            "did"
          ],
          "description": "Input arguments for  {@link  IDIDManager.didManagerGet | didManagerGet }"
        },
        "IDIDManagerGetByAliasArgs": {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string",
              "description": "Alias"
            },
            "provider": {
              "type": "string",
              "description": "Optional provider"
            }
          },
          "required": [
            "alias"
          ],
          "description": "Input arguments for  {@link  IDIDManager.didManagerGetByAlias | didManagerGetByAlias }"
        },
        "IDIDManagerGetOrCreateArgs": {
          "type": "object",
          "properties": {
            "alias": {
              "type": "string",
              "description": "Identifier alias. Can be used to reference an object in an external system"
            },
            "provider": {
              "type": "string",
              "description": "Optional. Identifier provider"
            },
            "kms": {
              "type": "string",
              "description": "Optional. Key Management System"
            },
            "options": {
              "type": "object",
              "description": "Optional. Identifier provider specific options"
            }
          },
          "required": [
            "alias"
          ],
          "description": "Input arguments for  {@link  IDIDManager.didManagerGetOrCreate | didManagerGetOrCreate }"
        },
        "MinimalImportableIdentifier": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "Decentralized identifier"
            },
            "alias": {
              "type": "string",
              "description": "Optional. Identifier alias. Can be used to reference an object in an external system"
            },
            "provider": {
              "type": "string",
              "description": "Identifier provider name"
            },
            "controllerKeyId": {
              "type": "string",
              "description": "Controller key id"
            },
            "keys": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MinimalImportableKey"
              }
            },
            "services": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IService"
              }
            }
          },
          "required": [
            "did",
            "keys",
            "provider"
          ],
          "description": "Represents the minimum amount of information needed to import an  {@link  IIdentifier }"
        },
        "MinimalImportableKey": {
          "$ref": "#/components/schemas/RequireOnly<IKey,(\"privateKeyHex\"|\"type\"|\"kms\")>",
          "description": "Represents the properties required to import a key."
        },
        "RequireOnly<IKey,(\"privateKeyHex\"|\"type\"|\"kms\")>": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "kms": {
              "type": "string",
              "description": "Key Management System"
            },
            "type": {
              "$ref": "#/components/schemas/TKeyType",
              "description": "Key type"
            },
            "publicKeyHex": {
              "type": "string",
              "description": "Public key"
            },
            "privateKeyHex": {
              "type": "string",
              "description": "Optional. Private key"
            },
            "meta": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/KeyMetadata"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Key metadata. This should be used to determine which algorithms are supported."
            }
          },
          "description": "Represents an object type where a subset of keys are required and everything else is optional."
        },
        "IDIDManagerRemoveKeyArgs": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "DID"
            },
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "options": {
              "type": "object",
              "description": "Optional. Identifier provider specific options"
            }
          },
          "required": [
            "did",
            "kid"
          ],
          "description": "Input arguments for  {@link  IDIDManager.didManagerRemoveKey | didManagerRemoveKey }"
        },
        "IDIDManagerRemoveServiceArgs": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "DID"
            },
            "id": {
              "type": "string",
              "description": "Service ID"
            },
            "options": {
              "type": "object",
              "description": "Optional. Identifier provider specific options"
            }
          },
          "required": [
            "did",
            "id"
          ],
          "description": "Input arguments for  {@link  IDIDManager.didManagerRemoveService | didManagerRemoveService }"
        },
        "IDIDManagerSetAliasArgs": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "Required. DID"
            },
            "alias": {
              "type": "string",
              "description": "Required. Identifier alias"
            }
          },
          "required": [
            "did",
            "alias"
          ],
          "description": "Input arguments for  {@link  IDIDManager.didManagerSetAlias | didManagerSetAlias }"
        }
      },
      "methods": {
        "didManagerAddKey": {
          "description": "Adds a key to a DID Document",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerAddKeyArgs"
          },
          "returnType": {
            "type": "object"
          }
        },
        "didManagerAddService": {
          "description": "Adds a service to a DID Document",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerAddServiceArgs"
          },
          "returnType": {
            "type": "object"
          }
        },
        "didManagerCreate": {
          "description": "Creates and returns a new identifier",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerCreateArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/IIdentifier"
          }
        },
        "didManagerDelete": {
          "description": "Deletes identifier",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerDeleteArgs"
          },
          "returnType": {
            "type": "boolean"
          }
        },
        "didManagerFind": {
          "description": "Returns a list of managed identifiers",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerFindArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IIdentifier"
            }
          }
        },
        "didManagerGet": {
          "description": "Returns a specific identifier",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerGetArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/IIdentifier"
          }
        },
        "didManagerGetByAlias": {
          "description": "Returns a specific identifier by alias",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerGetByAliasArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/IIdentifier"
          }
        },
        "didManagerGetOrCreate": {
          "description": "Returns an existing identifier or creates a new one for a specific alias",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerGetOrCreateArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/IIdentifier"
          }
        },
        "didManagerGetProviders": {
          "description": "Returns a list of available identifier providers",
          "arguments": {
            "type": "object"
          },
          "returnType": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "didManagerImport": {
          "description": "Imports identifier",
          "arguments": {
            "$ref": "#/components/schemas/MinimalImportableIdentifier"
          },
          "returnType": {
            "$ref": "#/components/schemas/IIdentifier"
          }
        },
        "didManagerRemoveKey": {
          "description": "Removes a key from a DID Document",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerRemoveKeyArgs"
          },
          "returnType": {
            "type": "object"
          }
        },
        "didManagerRemoveService": {
          "description": "Removes a service from a DID Document",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerRemoveServiceArgs"
          },
          "returnType": {
            "type": "object"
          }
        },
        "didManagerSetAlias": {
          "description": "Sets identifier alias",
          "arguments": {
            "$ref": "#/components/schemas/IDIDManagerSetAliasArgs"
          },
          "returnType": {
            "type": "boolean"
          }
        }
      }
    }
  },
  "IDataStore": {
    "components": {
      "schemas": {
        "IDataStoreDeleteVerifiableCredentialArgs": {
          "type": "object",
          "properties": {
            "hash": {
              "type": "string",
              "description": "Required. VerifiableCredential hash"
            }
          },
          "required": [
            "hash"
          ],
          "description": "Input arguments for  {@link  IDataStoreDeleteVerifiableCredentialArgs | IDataStoreDeleteVerifiableCredentialArgs }"
        },
        "IDataStoreGetMessageArgs": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Required. Message ID"
            }
          },
          "required": [
            "id"
          ],
          "description": "Input arguments for  {@link  IDataStore.dataStoreGetMessage | dataStoreGetMessage }"
        },
        "IMessage": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique message ID"
            },
            "type": {
              "type": "string",
              "description": "Message type"
            },
            "createdAt": {
              "type": "string",
              "description": "Optional. Creation date (ISO 8601)"
            },
            "expiresAt": {
              "type": "string",
              "description": "Optional. Expiration date (ISO 8601)"
            },
            "threadId": {
              "type": "string",
              "description": "Optional. Thread ID"
            },
            "raw": {
              "type": "string",
              "description": "Optional. Original message raw data"
            },
            "data": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Parsed data"
            },
            "replyTo": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. List of DIDs to reply to"
            },
            "replyUrl": {
              "type": "string",
              "description": "Optional. URL to post a reply message to"
            },
            "from": {
              "type": "string",
              "description": "Optional. Sender DID"
            },
            "to": {
              "type": "string",
              "description": "Optional. Recipient DID"
            },
            "metaData": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IMetaData"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Array of message metadata"
            },
            "credentials": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerifiableCredential"
              },
              "description": "Optional. Array of attached verifiable credentials"
            },
            "presentations": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerifiablePresentation"
              },
              "description": "Optional. Array of attached verifiable presentations"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "description": "Represents a DIDComm v1 message payload, with optionally decoded credentials and presentations."
        },
        "IMetaData": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type"
            },
            "value": {
              "type": "string",
              "description": "Optional. Value"
            }
          },
          "required": [
            "type"
          ],
          "description": "Message meta data"
        },
        "VerifiableCredential": {
          "type": "object",
          "properties": {
            "proof": {
              "$ref": "#/components/schemas/ProofType"
            },
            "issuer": {
              "$ref": "#/components/schemas/IssuerType"
            },
            "credentialSubject": {
              "$ref": "#/components/schemas/CredentialSubject"
            },
            "type": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "@context": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "issuanceDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "credentialStatus": {
              "$ref": "#/components/schemas/CredentialStatus"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "@context",
            "credentialSubject",
            "issuanceDate",
            "issuer",
            "proof"
          ],
          "description": "Represents a signed Verifiable Credential payload (includes proof), using a JSON representation. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials | VC data model }"
        },
        "ProofType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "description": "A proof property of a Verifiable Credential or Presentation"
        },
        "IssuerType": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ]
            },
            {
              "type": "string"
            }
          ],
          "description": "The issuer of a Credential or the holder of a Presentation.\n\nThe value of the issuer property MUST be either a URI or an object containing an id property. It is RECOMMENDED that the URI in the issuer or its id be one which, if de-referenced, results in a document containing machine-readable information about the issuer that can be used to verify the information expressed in the credential.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#issuer | Issuer data model }"
        },
        "CredentialSubject": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          },
          "description": "The value of the credentialSubject property is defined as a set of objects that contain one or more properties that are each related to a subject of the verifiable credential. Each object MAY contain an id.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#credential-subject | Credential Subject }"
        },
        "CredentialStatus": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Used for the discovery of information about the current status of a verifiable credential, such as whether it is suspended or revoked. The precise contents of the credential status information is determined by the specific `credentialStatus` type definition, and varies depending on factors such as whether it is simple to implement or if it is privacy-enhancing.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#status | Credential Status }"
        },
        "VerifiablePresentation": {
          "type": "object",
          "properties": {
            "proof": {
              "$ref": "#/components/schemas/ProofType"
            },
            "holder": {
              "type": "string"
            },
            "verifiableCredential": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/W3CVerifiableCredential"
              }
            },
            "type": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "@context": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "verifier": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "issuanceDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "@context",
            "holder",
            "proof"
          ],
          "description": "Represents a signed Verifiable Presentation (includes proof), using a JSON representation. See  {@link  https://www.w3.org/TR/vc-data-model/#presentations | VP data model }"
        },
        "W3CVerifiableCredential": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/VerifiableCredential"
            },
            {
              "$ref": "#/components/schemas/CompactJWT"
            }
          ],
          "description": "Represents a signed Verifiable Credential (includes proof), in either JSON or compact JWT format. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials | VC data model } \nSee  {@link  https://www.w3.org/TR/vc-data-model/#proof-formats | proof formats }"
        },
        "CompactJWT": {
          "type": "string",
          "description": "Represents a Json Web Token in compact form. \"header.payload.signature\""
        },
        "IDataStoreGetVerifiableCredentialArgs": {
          "type": "object",
          "properties": {
            "hash": {
              "type": "string",
              "description": "Required. VerifiableCredential hash"
            }
          },
          "required": [
            "hash"
          ],
          "description": "Input arguments for  {@link  IDataStore.dataStoreGetVerifiableCredential | dataStoreGetVerifiableCredential }"
        },
        "IDataStoreGetVerifiablePresentationArgs": {
          "type": "object",
          "properties": {
            "hash": {
              "type": "string",
              "description": "Required. VerifiablePresentation hash"
            }
          },
          "required": [
            "hash"
          ],
          "description": "Input arguments for  {@link  IDataStore.dataStoreGetVerifiablePresentation | dataStoreGetVerifiablePresentation }"
        },
        "IDataStoreSaveMessageArgs": {
          "type": "object",
          "properties": {
            "message": {
              "$ref": "#/components/schemas/IMessage",
              "description": "Required. Message"
            }
          },
          "required": [
            "message"
          ],
          "description": "Input arguments for  {@link  IDataStore.dataStoreSaveMessage | dataStoreSaveMessage }"
        },
        "IDataStoreSaveVerifiableCredentialArgs": {
          "type": "object",
          "properties": {
            "verifiableCredential": {
              "$ref": "#/components/schemas/VerifiableCredential",
              "description": "Required. VerifiableCredential"
            }
          },
          "required": [
            "verifiableCredential"
          ],
          "description": "Input arguments for  {@link  IDataStore.dataStoreSaveVerifiableCredential | dataStoreSaveVerifiableCredential }"
        },
        "IDataStoreSaveVerifiablePresentationArgs": {
          "type": "object",
          "properties": {
            "verifiablePresentation": {
              "$ref": "#/components/schemas/VerifiablePresentation",
              "description": "Required. VerifiablePresentation"
            }
          },
          "required": [
            "verifiablePresentation"
          ],
          "description": "Input arguments for  {@link  IDataStore.dataStoreSaveVerifiablePresentation | dataStoreSaveVerifiablePresentation }"
        }
      },
      "methods": {
        "dataStoreDeleteVerifiableCredential": {
          "description": "Deletes verifiable credential from the data store",
          "arguments": {
            "$ref": "#/components/schemas/IDataStoreDeleteVerifiableCredentialArgs"
          },
          "returnType": {
            "type": "boolean"
          }
        },
        "dataStoreGetMessage": {
          "description": "Gets message from the data store",
          "arguments": {
            "$ref": "#/components/schemas/IDataStoreGetMessageArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/IMessage"
          }
        },
        "dataStoreGetVerifiableCredential": {
          "description": "Gets verifiable credential from the data store",
          "arguments": {
            "$ref": "#/components/schemas/IDataStoreGetVerifiableCredentialArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/VerifiableCredential"
          }
        },
        "dataStoreGetVerifiablePresentation": {
          "description": "Gets verifiable presentation from the data store",
          "arguments": {
            "$ref": "#/components/schemas/IDataStoreGetVerifiablePresentationArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/VerifiablePresentation"
          }
        },
        "dataStoreSaveMessage": {
          "description": "Saves message to the data store",
          "arguments": {
            "$ref": "#/components/schemas/IDataStoreSaveMessageArgs"
          },
          "returnType": {
            "type": "string"
          }
        },
        "dataStoreSaveVerifiableCredential": {
          "description": "Saves verifiable credential to the data store",
          "arguments": {
            "$ref": "#/components/schemas/IDataStoreSaveVerifiableCredentialArgs"
          },
          "returnType": {
            "type": "string"
          }
        },
        "dataStoreSaveVerifiablePresentation": {
          "description": "Saves verifiable presentation to the data store",
          "arguments": {
            "$ref": "#/components/schemas/IDataStoreSaveVerifiablePresentationArgs"
          },
          "returnType": {
            "type": "string"
          }
        }
      }
    }
  },
  "IDataStoreORM": {
    "components": {
      "schemas": {
        "FindIdentifiersArgs": {
          "$ref": "#/components/schemas/FindArgs-TIdentifiersColumns",
          "description": "The filter that can be used to find  {@link  IIdentifier } s in the data store."
        },
        "FindArgs-TIdentifiersColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TIdentifiersColumns"
              },
              "description": "Imposes constraints on the values of the given columns. WHERE clauses are combined using AND."
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TIdentifiersColumns"
              },
              "description": "Sorts the results according to the given array of column priorities."
            },
            "skip": {
              "type": "number",
              "description": "Ignores the first number of entries in a  {@link  IDataStoreORM }  query result."
            },
            "take": {
              "type": "number",
              "description": "Returns at most this number of results from a  {@link  IDataStoreORM }  query."
            }
          },
          "description": "Represents an  {@link  IDataStoreORM }  Query."
        },
        "Where-TIdentifiersColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TIdentifiersColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ],
          "description": "Represents a WHERE predicate for a { @link IDataStoreORM.FindArgs } query. In situations where multiple WHERE predicates are present, they are combined with AND."
        },
        "TIdentifiersColumns": {
          "type": "string",
          "enum": [
            "did",
            "alias",
            "provider"
          ],
          "description": "The columns that can be queried for an  {@link  IIdentifier }",
          "deprecated": "This type will be removed in future versions of this plugin interface."
        },
        "Order-TIdentifiersColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TIdentifiersColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ],
          "description": "Represents the sort order of results from a { @link IDataStoreORM.FindArgs } query."
        },
        "PartialIdentifier": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "Decentralized identifier"
            },
            "alias": {
              "type": "string",
              "description": "Optional. Identifier alias. Can be used to reference an object in an external system"
            },
            "provider": {
              "type": "string",
              "description": "Identifier provider name"
            },
            "controllerKeyId": {
              "type": "string",
              "description": "Controller key id"
            },
            "keys": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IKey"
              },
              "description": "Array of managed keys"
            },
            "services": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IService"
              },
              "description": "Array of services"
            }
          },
          "description": "The result of a  {@link  IDataStoreORM.dataStoreORMGetIdentifiers }  query."
        },
        "IKey": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "kms": {
              "type": "string",
              "description": "Key Management System"
            },
            "type": {
              "$ref": "#/components/schemas/TKeyType",
              "description": "Key type"
            },
            "publicKeyHex": {
              "type": "string",
              "description": "Public key"
            },
            "privateKeyHex": {
              "type": "string",
              "description": "Optional. Private key"
            },
            "meta": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/KeyMetadata"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Key metadata. This should be used to determine which algorithms are supported."
            }
          },
          "required": [
            "kid",
            "kms",
            "type",
            "publicKeyHex"
          ],
          "description": "Cryptographic key"
        },
        "TKeyType": {
          "type": "string",
          "enum": [
            "Ed25519",
            "Secp256k1",
            "X25519",
            "Bls12381G1",
            "Bls12381G2"
          ],
          "description": "Cryptographic key type"
        },
        "KeyMetadata": {
          "type": "object",
          "properties": {
            "algorithms": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "IService": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "ID"
            },
            "type": {
              "type": "string",
              "description": "Service type"
            },
            "serviceEndpoint": {
              "type": "string",
              "description": "Endpoint URL"
            },
            "description": {
              "type": "string",
              "description": "Optional. Description"
            }
          },
          "required": [
            "id",
            "type",
            "serviceEndpoint"
          ],
          "description": "Identifier service"
        },
        "FindMessagesArgs": {
          "$ref": "#/components/schemas/FindArgs-TMessageColumns",
          "description": "The filter that can be used to find  {@link  IMessage } s in the data store. See  {@link  IDataStoreORM.dataStoreORMGetMessages }"
        },
        "FindArgs-TMessageColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TMessageColumns"
              },
              "description": "Imposes constraints on the values of the given columns. WHERE clauses are combined using AND."
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TMessageColumns"
              },
              "description": "Sorts the results according to the given array of column priorities."
            },
            "skip": {
              "type": "number",
              "description": "Ignores the first number of entries in a  {@link  IDataStoreORM }  query result."
            },
            "take": {
              "type": "number",
              "description": "Returns at most this number of results from a  {@link  IDataStoreORM }  query."
            }
          },
          "description": "Represents an  {@link  IDataStoreORM }  Query."
        },
        "Where-TMessageColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TMessageColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ],
          "description": "Represents a WHERE predicate for a { @link IDataStoreORM.FindArgs } query. In situations where multiple WHERE predicates are present, they are combined with AND."
        },
        "TMessageColumns": {
          "type": "string",
          "enum": [
            "from",
            "to",
            "id",
            "createdAt",
            "expiresAt",
            "threadId",
            "type",
            "raw",
            "replyTo",
            "replyUrl"
          ],
          "description": "The columns that can be queried for an  {@link  IMessage } \n\nSee  {@link  IDataStoreORM.dataStoreORMGetMessagesCount }"
        },
        "Order-TMessageColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TMessageColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ],
          "description": "Represents the sort order of results from a { @link IDataStoreORM.FindArgs } query."
        },
        "IMessage": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique message ID"
            },
            "type": {
              "type": "string",
              "description": "Message type"
            },
            "createdAt": {
              "type": "string",
              "description": "Optional. Creation date (ISO 8601)"
            },
            "expiresAt": {
              "type": "string",
              "description": "Optional. Expiration date (ISO 8601)"
            },
            "threadId": {
              "type": "string",
              "description": "Optional. Thread ID"
            },
            "raw": {
              "type": "string",
              "description": "Optional. Original message raw data"
            },
            "data": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Parsed data"
            },
            "replyTo": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. List of DIDs to reply to"
            },
            "replyUrl": {
              "type": "string",
              "description": "Optional. URL to post a reply message to"
            },
            "from": {
              "type": "string",
              "description": "Optional. Sender DID"
            },
            "to": {
              "type": "string",
              "description": "Optional. Recipient DID"
            },
            "metaData": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IMetaData"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Array of message metadata"
            },
            "credentials": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerifiableCredential"
              },
              "description": "Optional. Array of attached verifiable credentials"
            },
            "presentations": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerifiablePresentation"
              },
              "description": "Optional. Array of attached verifiable presentations"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "description": "Represents a DIDComm v1 message payload, with optionally decoded credentials and presentations."
        },
        "IMetaData": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type"
            },
            "value": {
              "type": "string",
              "description": "Optional. Value"
            }
          },
          "required": [
            "type"
          ],
          "description": "Message meta data"
        },
        "VerifiableCredential": {
          "type": "object",
          "properties": {
            "proof": {
              "$ref": "#/components/schemas/ProofType"
            },
            "issuer": {
              "$ref": "#/components/schemas/IssuerType"
            },
            "credentialSubject": {
              "$ref": "#/components/schemas/CredentialSubject"
            },
            "type": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "@context": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "issuanceDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "credentialStatus": {
              "$ref": "#/components/schemas/CredentialStatus"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "@context",
            "credentialSubject",
            "issuanceDate",
            "issuer",
            "proof"
          ],
          "description": "Represents a signed Verifiable Credential payload (includes proof), using a JSON representation. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials | VC data model }"
        },
        "ProofType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "description": "A proof property of a Verifiable Credential or Presentation"
        },
        "IssuerType": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ]
            },
            {
              "type": "string"
            }
          ],
          "description": "The issuer of a Credential or the holder of a Presentation.\n\nThe value of the issuer property MUST be either a URI or an object containing an id property. It is RECOMMENDED that the URI in the issuer or its id be one which, if de-referenced, results in a document containing machine-readable information about the issuer that can be used to verify the information expressed in the credential.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#issuer | Issuer data model }"
        },
        "CredentialSubject": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          },
          "description": "The value of the credentialSubject property is defined as a set of objects that contain one or more properties that are each related to a subject of the verifiable credential. Each object MAY contain an id.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#credential-subject | Credential Subject }"
        },
        "CredentialStatus": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Used for the discovery of information about the current status of a verifiable credential, such as whether it is suspended or revoked. The precise contents of the credential status information is determined by the specific `credentialStatus` type definition, and varies depending on factors such as whether it is simple to implement or if it is privacy-enhancing.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#status | Credential Status }"
        },
        "VerifiablePresentation": {
          "type": "object",
          "properties": {
            "proof": {
              "$ref": "#/components/schemas/ProofType"
            },
            "holder": {
              "type": "string"
            },
            "verifiableCredential": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/W3CVerifiableCredential"
              }
            },
            "type": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "@context": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "verifier": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "issuanceDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "@context",
            "holder",
            "proof"
          ],
          "description": "Represents a signed Verifiable Presentation (includes proof), using a JSON representation. See  {@link  https://www.w3.org/TR/vc-data-model/#presentations | VP data model }"
        },
        "W3CVerifiableCredential": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/VerifiableCredential"
            },
            {
              "$ref": "#/components/schemas/CompactJWT"
            }
          ],
          "description": "Represents a signed Verifiable Credential (includes proof), in either JSON or compact JWT format. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials | VC data model } \nSee  {@link  https://www.w3.org/TR/vc-data-model/#proof-formats | proof formats }"
        },
        "CompactJWT": {
          "type": "string",
          "description": "Represents a Json Web Token in compact form. \"header.payload.signature\""
        },
        "FindCredentialsArgs": {
          "$ref": "#/components/schemas/FindArgs-TCredentialColumns",
          "description": "The filter that can be used to find  {@link  VerifiableCredential } s in the data store. See  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentials }"
        },
        "FindArgs-TCredentialColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TCredentialColumns"
              },
              "description": "Imposes constraints on the values of the given columns. WHERE clauses are combined using AND."
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TCredentialColumns"
              },
              "description": "Sorts the results according to the given array of column priorities."
            },
            "skip": {
              "type": "number",
              "description": "Ignores the first number of entries in a  {@link  IDataStoreORM }  query result."
            },
            "take": {
              "type": "number",
              "description": "Returns at most this number of results from a  {@link  IDataStoreORM }  query."
            }
          },
          "description": "Represents an  {@link  IDataStoreORM }  Query."
        },
        "Where-TCredentialColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TCredentialColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ],
          "description": "Represents a WHERE predicate for a { @link IDataStoreORM.FindArgs } query. In situations where multiple WHERE predicates are present, they are combined with AND."
        },
        "TCredentialColumns": {
          "type": "string",
          "enum": [
            "context",
            "type",
            "id",
            "issuer",
            "subject",
            "expirationDate",
            "issuanceDate"
          ],
          "description": "The columns that can be searched for a  {@link  VerifiableCredential } \n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentials } \nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsCount }"
        },
        "Order-TCredentialColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TCredentialColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ],
          "description": "Represents the sort order of results from a { @link IDataStoreORM.FindArgs } query."
        },
        "UniqueVerifiableCredential": {
          "type": "object",
          "properties": {
            "hash": {
              "type": "string"
            },
            "verifiableCredential": {
              "$ref": "#/components/schemas/VerifiableCredential"
            }
          },
          "required": [
            "hash",
            "verifiableCredential"
          ],
          "description": "Represents the result of a Query for  {@link  VerifiableCredential } s\n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentials } \nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsByClaims }"
        },
        "FindClaimsArgs": {
          "$ref": "#/components/schemas/FindArgs-TClaimsColumns",
          "description": "The filter that can be used to find  {@link  VerifiableCredential } s in the data store, based on the types and values of their claims.\n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsByClaims }"
        },
        "FindArgs-TClaimsColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TClaimsColumns"
              },
              "description": "Imposes constraints on the values of the given columns. WHERE clauses are combined using AND."
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TClaimsColumns"
              },
              "description": "Sorts the results according to the given array of column priorities."
            },
            "skip": {
              "type": "number",
              "description": "Ignores the first number of entries in a  {@link  IDataStoreORM }  query result."
            },
            "take": {
              "type": "number",
              "description": "Returns at most this number of results from a  {@link  IDataStoreORM }  query."
            }
          },
          "description": "Represents an  {@link  IDataStoreORM }  Query."
        },
        "Where-TClaimsColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TClaimsColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ],
          "description": "Represents a WHERE predicate for a { @link IDataStoreORM.FindArgs } query. In situations where multiple WHERE predicates are present, they are combined with AND."
        },
        "TClaimsColumns": {
          "type": "string",
          "enum": [
            "context",
            "credentialType",
            "type",
            "value",
            "isObj",
            "id",
            "issuer",
            "subject",
            "expirationDate",
            "issuanceDate"
          ],
          "description": "The columns that can be searched for the claims of a  {@link  VerifiableCredential } \n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsByClaims } \nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiableCredentialsByClaimsCount }"
        },
        "Order-TClaimsColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TClaimsColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ],
          "description": "Represents the sort order of results from a { @link IDataStoreORM.FindArgs } query."
        },
        "FindPresentationsArgs": {
          "$ref": "#/components/schemas/FindArgs-TPresentationColumns",
          "description": "The filter that can be used to find  {@link  VerifiablePresentation } s in the data store. See  {@link  IDataStoreORM.dataStoreORMGetVerifiablePresentations }"
        },
        "FindArgs-TPresentationColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TPresentationColumns"
              },
              "description": "Imposes constraints on the values of the given columns. WHERE clauses are combined using AND."
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TPresentationColumns"
              },
              "description": "Sorts the results according to the given array of column priorities."
            },
            "skip": {
              "type": "number",
              "description": "Ignores the first number of entries in a  {@link  IDataStoreORM }  query result."
            },
            "take": {
              "type": "number",
              "description": "Returns at most this number of results from a  {@link  IDataStoreORM }  query."
            }
          },
          "description": "Represents an  {@link  IDataStoreORM }  Query."
        },
        "Where-TPresentationColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TPresentationColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ],
          "description": "Represents a WHERE predicate for a { @link IDataStoreORM.FindArgs } query. In situations where multiple WHERE predicates are present, they are combined with AND."
        },
        "TPresentationColumns": {
          "type": "string",
          "enum": [
            "context",
            "type",
            "id",
            "holder",
            "verifier",
            "expirationDate",
            "issuanceDate"
          ],
          "description": "The columns that can be searched for a  {@link  VerifiablePresentation } \n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiablePresentations } \nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiablePresentationsCount }"
        },
        "Order-TPresentationColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TPresentationColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ],
          "description": "Represents the sort order of results from a { @link IDataStoreORM.FindArgs } query."
        },
        "UniqueVerifiablePresentation": {
          "type": "object",
          "properties": {
            "hash": {
              "type": "string"
            },
            "verifiablePresentation": {
              "$ref": "#/components/schemas/VerifiablePresentation"
            }
          },
          "required": [
            "hash",
            "verifiablePresentation"
          ],
          "description": "Represents the result of a Query for  {@link  VerifiablePresentation } s\n\nSee  {@link  IDataStoreORM.dataStoreORMGetVerifiablePresentations }"
        }
      },
      "methods": {
        "dataStoreORMGetIdentifiers": {
          "description": "Tries to obtain a list of ",
          "arguments": {
            "$ref": "#/components/schemas/FindIdentifiersArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartialIdentifier"
            }
          }
        },
        "dataStoreORMGetIdentifiersCount": {
          "description": "Tries to obtain a count of ",
          "arguments": {
            "$ref": "#/components/schemas/FindIdentifiersArgs"
          },
          "returnType": {
            "type": "number"
          }
        },
        "dataStoreORMGetMessages": {
          "description": "Returns a list of ",
          "arguments": {
            "$ref": "#/components/schemas/FindMessagesArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IMessage"
            }
          }
        },
        "dataStoreORMGetMessagesCount": {
          "description": "Returns a count of ",
          "arguments": {
            "$ref": "#/components/schemas/FindMessagesArgs"
          },
          "returnType": {
            "type": "number"
          }
        },
        "dataStoreORMGetVerifiableCredentials": {
          "description": "Returns a list of ",
          "arguments": {
            "$ref": "#/components/schemas/FindCredentialsArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueVerifiableCredential"
            }
          }
        },
        "dataStoreORMGetVerifiableCredentialsByClaims": {
          "description": "Returns a list of ",
          "arguments": {
            "$ref": "#/components/schemas/FindClaimsArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueVerifiableCredential"
            }
          }
        },
        "dataStoreORMGetVerifiableCredentialsByClaimsCount": {
          "description": "Returns a count of ",
          "arguments": {
            "$ref": "#/components/schemas/FindClaimsArgs"
          },
          "returnType": {
            "type": "number"
          }
        },
        "dataStoreORMGetVerifiableCredentialsCount": {
          "description": "Returns a count of ",
          "arguments": {
            "$ref": "#/components/schemas/FindCredentialsArgs"
          },
          "returnType": {
            "type": "number"
          }
        },
        "dataStoreORMGetVerifiablePresentations": {
          "description": "Returns a list of ",
          "arguments": {
            "$ref": "#/components/schemas/FindPresentationsArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueVerifiablePresentation"
            }
          }
        },
        "dataStoreORMGetVerifiablePresentationsCount": {
          "description": "Returns a count of ",
          "arguments": {
            "$ref": "#/components/schemas/FindPresentationsArgs"
          },
          "returnType": {
            "type": "number"
          }
        }
      }
    }
  },
  "IMessageHandler": {
    "components": {
      "schemas": {
        "IHandleMessageArgs": {
          "type": "object",
          "properties": {
            "raw": {
              "type": "string",
              "description": "Raw message data"
            },
            "metaData": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IMetaData"
              },
              "description": "Optional. Message meta data"
            },
            "save": {
              "type": "boolean",
              "description": "Optional. If set to `true`, the message will be saved using  {@link  IDataStore.dataStoreSaveMessage | dataStoreSaveMessage }"
            }
          },
          "required": [
            "raw"
          ],
          "description": "Input arguments for  {@link  IMessageHandler.handleMessage | handleMessage }"
        },
        "IMetaData": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type"
            },
            "value": {
              "type": "string",
              "description": "Optional. Value"
            }
          },
          "required": [
            "type"
          ],
          "description": "Message meta data"
        },
        "IMessage": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique message ID"
            },
            "type": {
              "type": "string",
              "description": "Message type"
            },
            "createdAt": {
              "type": "string",
              "description": "Optional. Creation date (ISO 8601)"
            },
            "expiresAt": {
              "type": "string",
              "description": "Optional. Expiration date (ISO 8601)"
            },
            "threadId": {
              "type": "string",
              "description": "Optional. Thread ID"
            },
            "raw": {
              "type": "string",
              "description": "Optional. Original message raw data"
            },
            "data": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Parsed data"
            },
            "replyTo": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. List of DIDs to reply to"
            },
            "replyUrl": {
              "type": "string",
              "description": "Optional. URL to post a reply message to"
            },
            "from": {
              "type": "string",
              "description": "Optional. Sender DID"
            },
            "to": {
              "type": "string",
              "description": "Optional. Recipient DID"
            },
            "metaData": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IMetaData"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Array of message metadata"
            },
            "credentials": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerifiableCredential"
              },
              "description": "Optional. Array of attached verifiable credentials"
            },
            "presentations": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerifiablePresentation"
              },
              "description": "Optional. Array of attached verifiable presentations"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "description": "Represents a DIDComm v1 message payload, with optionally decoded credentials and presentations."
        },
        "VerifiableCredential": {
          "type": "object",
          "properties": {
            "proof": {
              "$ref": "#/components/schemas/ProofType"
            },
            "issuer": {
              "$ref": "#/components/schemas/IssuerType"
            },
            "credentialSubject": {
              "$ref": "#/components/schemas/CredentialSubject"
            },
            "type": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "@context": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "issuanceDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "credentialStatus": {
              "$ref": "#/components/schemas/CredentialStatus"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "@context",
            "credentialSubject",
            "issuanceDate",
            "issuer",
            "proof"
          ],
          "description": "Represents a signed Verifiable Credential payload (includes proof), using a JSON representation. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials | VC data model }"
        },
        "ProofType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "description": "A proof property of a Verifiable Credential or Presentation"
        },
        "IssuerType": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ]
            },
            {
              "type": "string"
            }
          ],
          "description": "The issuer of a Credential or the holder of a Presentation.\n\nThe value of the issuer property MUST be either a URI or an object containing an id property. It is RECOMMENDED that the URI in the issuer or its id be one which, if de-referenced, results in a document containing machine-readable information about the issuer that can be used to verify the information expressed in the credential.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#issuer | Issuer data model }"
        },
        "CredentialSubject": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          },
          "description": "The value of the credentialSubject property is defined as a set of objects that contain one or more properties that are each related to a subject of the verifiable credential. Each object MAY contain an id.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#credential-subject | Credential Subject }"
        },
        "CredentialStatus": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Used for the discovery of information about the current status of a verifiable credential, such as whether it is suspended or revoked. The precise contents of the credential status information is determined by the specific `credentialStatus` type definition, and varies depending on factors such as whether it is simple to implement or if it is privacy-enhancing.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#status | Credential Status }"
        },
        "VerifiablePresentation": {
          "type": "object",
          "properties": {
            "proof": {
              "$ref": "#/components/schemas/ProofType"
            },
            "holder": {
              "type": "string"
            },
            "verifiableCredential": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/W3CVerifiableCredential"
              }
            },
            "type": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "@context": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "verifier": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "issuanceDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "@context",
            "holder",
            "proof"
          ],
          "description": "Represents a signed Verifiable Presentation (includes proof), using a JSON representation. See  {@link  https://www.w3.org/TR/vc-data-model/#presentations | VP data model }"
        },
        "W3CVerifiableCredential": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/VerifiableCredential"
            },
            {
              "$ref": "#/components/schemas/CompactJWT"
            }
          ],
          "description": "Represents a signed Verifiable Credential (includes proof), in either JSON or compact JWT format. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials | VC data model } \nSee  {@link  https://www.w3.org/TR/vc-data-model/#proof-formats | proof formats }"
        },
        "CompactJWT": {
          "type": "string",
          "description": "Represents a Json Web Token in compact form. \"header.payload.signature\""
        }
      },
      "methods": {
        "handleMessage": {
          "description": "Parses and optionally saves a message",
          "arguments": {
            "$ref": "#/components/schemas/IHandleMessageArgs"
          },
          "returnType": {
            "$ref": "#/components/schemas/IMessage"
          }
        }
      }
    }
  }
}