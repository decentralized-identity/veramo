{
  "IDataStoreORM": {
    "components": {
      "schemas": {
        "FindIdentifiersArgs": {
          "$ref": "#/components/schemas/FindArgs-TIdentifiersColumns"
        },
        "FindArgs-TIdentifiersColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TIdentifiersColumns"
              }
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TIdentifiersColumns"
              }
            },
            "take": {
              "type": "number"
            },
            "skip": {
              "type": "number"
            }
          }
        },
        "Where-TIdentifiersColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TIdentifiersColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ]
        },
        "TIdentifiersColumns": {
          "type": "string",
          "enum": [
            "did",
            "alias",
            "provider"
          ]
        },
        "Order-TIdentifiersColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TIdentifiersColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ]
        },
        "PartialIdentifier": {
          "type": "object",
          "properties": {
            "did": {
              "type": "string",
              "description": "Decentralized identifier"
            },
            "alias": {
              "type": "string",
              "description": "Optional. Identifier alias. Can be used to reference an object in an external system"
            },
            "provider": {
              "type": "string",
              "description": "Identifier provider name"
            },
            "controllerKeyId": {
              "type": "string",
              "description": "Controller key id"
            },
            "keys": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IKey"
              },
              "description": "Array of managed keys"
            },
            "services": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IService"
              },
              "description": "Array of services"
            }
          }
        },
        "IKey": {
          "type": "object",
          "properties": {
            "kid": {
              "type": "string",
              "description": "Key ID"
            },
            "kms": {
              "type": "string",
              "description": "Key Management System"
            },
            "type": {
              "$ref": "#/components/schemas/TKeyType",
              "description": "Key type"
            },
            "publicKeyHex": {
              "type": "string",
              "description": "Public key"
            },
            "privateKeyHex": {
              "type": "string",
              "description": "Optional. Private key"
            },
            "meta": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/KeyMetadata"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Key metadata. This should be used to determine which algorithms are supported."
            }
          },
          "required": [
            "kid",
            "kms",
            "type",
            "publicKeyHex"
          ],
          "description": "Cryptographic key"
        },
        "TKeyType": {
          "type": "string",
          "enum": [
            "Ed25519",
            "Secp256k1",
            "X25519"
          ],
          "description": "Cryptographic key type"
        },
        "KeyMetadata": {
          "type": "object",
          "properties": {
            "algorithms": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "IService": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "ID"
            },
            "type": {
              "type": "string",
              "description": "Service type"
            },
            "serviceEndpoint": {
              "type": "string",
              "description": "Endpoint URL"
            },
            "description": {
              "type": "string",
              "description": "Optional. Description"
            }
          },
          "required": [
            "id",
            "type",
            "serviceEndpoint"
          ],
          "description": "Identifier service"
        },
        "FindMessagesArgs": {
          "$ref": "#/components/schemas/FindArgs-TMessageColumns"
        },
        "FindArgs-TMessageColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TMessageColumns"
              }
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TMessageColumns"
              }
            },
            "take": {
              "type": "number"
            },
            "skip": {
              "type": "number"
            }
          }
        },
        "Where-TMessageColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TMessageColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ]
        },
        "TMessageColumns": {
          "type": "string",
          "enum": [
            "from",
            "to",
            "id",
            "createdAt",
            "expiresAt",
            "threadId",
            "type",
            "raw",
            "replyTo",
            "replyUrl"
          ]
        },
        "Order-TMessageColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TMessageColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ]
        },
        "IMessage": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique message ID"
            },
            "type": {
              "type": "string",
              "description": "Message type"
            },
            "createdAt": {
              "type": "string",
              "description": "Optional. Creation date (ISO 8601)"
            },
            "expiresAt": {
              "type": "string",
              "description": "Optional. Expiration date (ISO 8601)"
            },
            "threadId": {
              "type": "string",
              "description": "Optional. Thread ID"
            },
            "raw": {
              "type": "string",
              "description": "Optional. Original message raw data"
            },
            "data": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Parsed data"
            },
            "replyTo": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional. List of DIDs to reply to"
            },
            "replyUrl": {
              "type": "string",
              "description": "Optional. URL to post a reply message to"
            },
            "from": {
              "type": "string",
              "description": "Optional. Sender DID"
            },
            "to": {
              "type": "string",
              "description": "Optional. Recipient DID"
            },
            "metaData": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IMetaData"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional. Array of message metadata"
            },
            "credentials": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerifiableCredential"
              },
              "description": "Optional. Array of attached verifiable credentials"
            },
            "presentations": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerifiablePresentation"
              },
              "description": "Optional. Array of attached verifiable presentations"
            }
          },
          "required": [
            "id",
            "type"
          ],
          "description": "Represents a DIDComm v1 message payload, with optionally decoded credentials and presentations."
        },
        "IMetaData": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type"
            },
            "value": {
              "type": "string",
              "description": "Optional. Value"
            }
          },
          "required": [
            "type"
          ],
          "description": "Message meta data"
        },
        "VerifiableCredential": {
          "type": "object",
          "properties": {
            "proof": {
              "$ref": "#/components/schemas/ProofType"
            },
            "issuer": {
              "$ref": "#/components/schemas/IssuerType"
            },
            "credentialSubject": {
              "$ref": "#/components/schemas/CredentialSubject"
            },
            "type": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "@context": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "issuanceDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "credentialStatus": {
              "$ref": "#/components/schemas/CredentialStatus"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "@context",
            "credentialSubject",
            "issuanceDate",
            "issuer",
            "proof"
          ],
          "description": "Represents a signed Verifiable Credential payload (includes proof), using a JSON representation. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials | VC data model }"
        },
        "ProofType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "description": "A proof property of a Verifiable Credential or Presentation"
        },
        "IssuerType": {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              },
              "required": [
                "id"
              ]
            },
            {
              "type": "string"
            }
          ],
          "description": "The issuer of a Credential or the holder of a Presentation.\n\nThe value of the issuer property MUST be either a URI or an object containing an id property. It is RECOMMENDED that the URI in the issuer or its id be one which, if de-referenced, results in a document containing machine-readable information about the issuer that can be used to verify the information expressed in the credential.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#issuer | Issuer data model }"
        },
        "CredentialSubject": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          },
          "description": "The value of the credentialSubject property is defined as a set of objects that contain one or more properties that are each related to a subject of the verifiable credential. Each object MAY contain an id.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#credential-subject | Credential Subject }"
        },
        "CredentialStatus": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Used for the discovery of information about the current status of a verifiable credential, such as whether it is suspended or revoked. The precise contents of the credential status information is determined by the specific `credentialStatus` type definition, and varies depending on factors such as whether it is simple to implement or if it is privacy-enhancing.\n\nSee  {@link  https://www.w3.org/TR/vc-data-model/#status | Credential Status }"
        },
        "VerifiablePresentation": {
          "type": "object",
          "properties": {
            "proof": {
              "$ref": "#/components/schemas/ProofType"
            },
            "holder": {
              "type": "string"
            },
            "verifiableCredential": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/W3CVerifiableCredential"
              }
            },
            "type": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "@context": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "verifier": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "issuanceDate": {
              "type": "string"
            },
            "expirationDate": {
              "type": "string"
            },
            "id": {
              "type": "string"
            }
          },
          "required": [
            "@context",
            "holder",
            "proof"
          ],
          "description": "Represents a signed Verifiable Presentation (includes proof), using a JSON representation. See  {@link  https://www.w3.org/TR/vc-data-model/#presentations | VP data model }"
        },
        "W3CVerifiableCredential": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/VerifiableCredential"
            },
            {
              "$ref": "#/components/schemas/CompactJWT"
            }
          ],
          "description": "Represents a signed Verifiable Credential (includes proof), in either JSON or compact JWT format. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials | VC data model } \nSee  {@link  https://www.w3.org/TR/vc-data-model/#proof-formats | proof formats }"
        },
        "CompactJWT": {
          "type": "string",
          "description": "Represents a Json Web Token in compact form. \"header.payload.signature\""
        },
        "FindCredentialsArgs": {
          "$ref": "#/components/schemas/FindArgs-TCredentialColumns"
        },
        "FindArgs-TCredentialColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TCredentialColumns"
              }
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TCredentialColumns"
              }
            },
            "take": {
              "type": "number"
            },
            "skip": {
              "type": "number"
            }
          }
        },
        "Where-TCredentialColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TCredentialColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ]
        },
        "TCredentialColumns": {
          "type": "string",
          "enum": [
            "context",
            "type",
            "id",
            "issuer",
            "subject",
            "expirationDate",
            "issuanceDate"
          ]
        },
        "Order-TCredentialColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TCredentialColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ]
        },
        "UniqueVerifiableCredential": {
          "type": "object",
          "properties": {
            "hash": {
              "type": "string"
            },
            "verifiableCredential": {
              "$ref": "#/components/schemas/VerifiableCredential"
            }
          },
          "required": [
            "hash",
            "verifiableCredential"
          ]
        },
        "FindClaimsArgs": {
          "$ref": "#/components/schemas/FindArgs-TClaimsColumns"
        },
        "FindArgs-TClaimsColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TClaimsColumns"
              }
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TClaimsColumns"
              }
            },
            "take": {
              "type": "number"
            },
            "skip": {
              "type": "number"
            }
          }
        },
        "Where-TClaimsColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TClaimsColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ]
        },
        "TClaimsColumns": {
          "type": "string",
          "enum": [
            "context",
            "credentialType",
            "type",
            "value",
            "isObj",
            "id",
            "issuer",
            "subject",
            "expirationDate",
            "issuanceDate"
          ]
        },
        "Order-TClaimsColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TClaimsColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ]
        },
        "FindPresentationsArgs": {
          "$ref": "#/components/schemas/FindArgs-TPresentationColumns"
        },
        "FindArgs-TPresentationColumns": {
          "type": "object",
          "properties": {
            "where": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Where-TPresentationColumns"
              }
            },
            "order": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Order-TPresentationColumns"
              }
            },
            "take": {
              "type": "number"
            },
            "skip": {
              "type": "number"
            }
          }
        },
        "Where-TPresentationColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TPresentationColumns"
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "not": {
              "type": "boolean"
            },
            "op": {
              "type": "string",
              "enum": [
                "LessThan",
                "LessThanOrEqual",
                "MoreThan",
                "MoreThanOrEqual",
                "Equal",
                "Like",
                "Between",
                "In",
                "Any",
                "IsNull"
              ]
            }
          },
          "required": [
            "column"
          ]
        },
        "TPresentationColumns": {
          "type": "string",
          "enum": [
            "context",
            "type",
            "id",
            "holder",
            "verifier",
            "expirationDate",
            "issuanceDate"
          ]
        },
        "Order-TPresentationColumns": {
          "type": "object",
          "properties": {
            "column": {
              "$ref": "#/components/schemas/TPresentationColumns"
            },
            "direction": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          },
          "required": [
            "column",
            "direction"
          ]
        },
        "UniqueVerifiablePresentation": {
          "type": "object",
          "properties": {
            "hash": {
              "type": "string"
            },
            "verifiablePresentation": {
              "$ref": "#/components/schemas/VerifiablePresentation"
            }
          },
          "required": [
            "hash",
            "verifiablePresentation"
          ]
        }
      },
      "methods": {
        "dataStoreORMGetIdentifiers": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindIdentifiersArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartialIdentifier"
            }
          }
        },
        "dataStoreORMGetIdentifiersCount": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindIdentifiersArgs"
          },
          "returnType": {
            "type": "number"
          }
        },
        "dataStoreORMGetMessages": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindMessagesArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IMessage"
            }
          }
        },
        "dataStoreORMGetMessagesCount": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindMessagesArgs"
          },
          "returnType": {
            "type": "number"
          }
        },
        "dataStoreORMGetVerifiableCredentials": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindCredentialsArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueVerifiableCredential"
            }
          }
        },
        "dataStoreORMGetVerifiableCredentialsByClaims": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindClaimsArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueVerifiableCredential"
            }
          }
        },
        "dataStoreORMGetVerifiableCredentialsByClaimsCount": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindClaimsArgs"
          },
          "returnType": {
            "type": "number"
          }
        },
        "dataStoreORMGetVerifiableCredentialsCount": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindCredentialsArgs"
          },
          "returnType": {
            "type": "number"
          }
        },
        "dataStoreORMGetVerifiablePresentations": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindPresentationsArgs"
          },
          "returnType": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueVerifiablePresentation"
            }
          }
        },
        "dataStoreORMGetVerifiablePresentationsCount": {
          "description": "",
          "arguments": {
            "$ref": "#/components/schemas/FindPresentationsArgs"
          },
          "returnType": {
            "type": "number"
          }
        }
      }
    }
  }
}